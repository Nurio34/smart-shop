// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  clerkId       String         @unique
  email         String         @unique
  name          String?
  avatar        String?
  role          Role           @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  seller        Seller?
  reviews       Review[]
  orders        Order[]
  notifications Notification[]
  history       Product[]      @relation("UserHistory")
}

enum Messager {
  user
  model
}

enum Role {
  USER
  SELLER
  ADMIN
}

model Seller {
  id                   String       @id @default(cuid())
  userId               String       @unique
  user                 User         @relation(fields: [userId], references: [clerkId])
  brand                String
  description          String
  returnPolicy         String
  minimumOrderQuantity Int
  status               SellerStatus @default(PENDING)
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  products             Product[]
}

enum SellerStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

model Product {
  id                   String      @id @default(cuid())
  sellerId             String
  seller               Seller      @relation(fields: [sellerId], references: [userId])
  title                String
  description          String
  category             String
  price                Float
  discountPercentage   Float       @default(0)
  rating               Float       @default(0)
  stock                Int
  tags                 String[]
  brand                String
  reviews              Review[]
  returnPolicy         String
  minimumOrderQuantity Int
  images               Image[]
  thumbnail            Thumbnail?
  orderItems           OrderItem[]
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  history              User[]      @relation("UserHistory")
}

model Image {
  id        String  @id @default(cuid())
  public_id String
  url       String
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Thumbnail {
  id        String  @id @default(cuid())
  public_id String 
  url       String
  productId String @unique
  product Product @relation(fields: [productId],references: [id])
}

model Review {
  id         String   @id @default(cuid())
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  rating     Int
  comment    String
  date       DateTime
  reviewerId String
  reviewer   User     @relation(fields: [reviewerId], references: [clerkId])
}

model Order {
  id          String      @id @default(cuid())
  userClerkId String
  user        User        @relation(fields: [userClerkId], references: [clerkId])
  status      OrderStatus
  totalAmount Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  items       OrderItem[]
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELED
}

model Notification {
  id         String   @id @default(cuid())
  recieverId String
  reciever   User     @relation(fields: [recieverId], references: [clerkId])
  message    String
  seen       Boolean  @default(false)
  createdAt  DateTime @default(now())
}
